part_HPLC_sens$trainCl,
part_HPLC_sens$testCl, kerList)
#Accuracy, kernel, cross table and confusion matrix of tuned model
print("Accuracy:")
optimal_svm_hplc$bestAccuracy
print("Kernel:")
optimal_svm_hplc$bestKernel
print("Cross table:")
optimal_svm_hplc$bestCrossTable$t
print("Confusion matrix:")
optimal_svm_hplc$bestConfusionMatrix
#Run the optimised model for 100 iterations, save the resulting accuracies list
HPLC_sens_run_svm <- model.run(AllData_HPLC_sens,
AllData_HPLC_sens$sensory,
0.7, 100,
operation = function(trainSet, trainCl, testSet, testCl, kernel_type) {
#Apply svm with kernel = rbfdot and
model_svm <- ksvm(sensory ~ ., data=trainSet, kernel = "rbfdot", C=1)
kernel.predicted <- predict(model_svm, testSet, type="response")
return(kernel.predicted)
})
#Calculate cumulative mean of previous model
cum_mean_HPLC_svm <- cumulative.mean.accuracy(HPLC_sens_run_svm$accuracies)
#Print cumulative mean accuracy of 100th iteration
cum_mean_HPLC_svm[100]
#List of kernels to test for classification
kerList <- as.array(c('vanilladot', 'polydot', 'rbfdot', 'tanhdot'))
#Optimisation of the model: test of kernels from the list
optimal_svm_enose <- svm.optimisation(part_enose_sens$trainSet, part_enose_sens$testSet, part_enose_sens$trainCl, part_enose_sens$testCl, kerList)
#Print accuracy and kernel of tuned model
optimal_svm_enose$bestAccuracy
optimal_svm_enose$bestKernel
#Run the optimised model for 100 iterations, save the resulting accuracies list
enose_sens_run_svm <- model.run(AllData_enose_sens,
AllData_enose_sens$sensory,
0.7, 100,
operation = function(trainSet, trainCl, testSet, testCl, kernel_type) {
#Apply svm with kernel = rbfdot and
model_svm <- ksvm(sensory ~ ., data=trainSet, kernel = "rbfdot", C=1)
kernel.predicted <- predict(model_svm, testSet, type="response")
return(kernel.predicted)
})
#Calculate cumulative mean
cum_mean_enose_svm <- cumulative.mean.accuracy(enose_sens_run_svm$accuracies)
#Print cumulative mean accuracy of 100th iteration
cum_mean_enose_svm[100]
#Create a learner
rf_class_learner_HPLC <- rf_class_learner(AllData_HPLC_sens)
rf_class_learner_HPLC$rf_task
#Check the number of elements for each sensory
rf_class_learner_HPLC$plt
#List of hypoparameters
rf_class_learner_HPLC$learner$param_set$ids()
#Pefrom tuning for hplc
rf_tuning_HPLC <- rf_tuning(ntree_min = 200, ntree_max = 500,
mtry_min = 2, mtry_max = 19,
nodesize_min = 1, nodesize_max = 5,
maxnodes_min = 2, maxnodes_max = 20,
nb_evaluation = 20, part_ratio = .7,
task_rf = rf_class_learner_HPLC$rf_task,
AllData = AllData_HPLC_sens
)
rf_tuning_HPLC$instance$result_learner_param_vals
learner_tun_HPLC <- built_model(learner_tun = rf_tuning_HPLC$learner_tun,
instance = rf_tuning_HPLC$instance,
task_train = rf_tuning_HPLC$task_train)
#Print tuned model
learner_tun_HPLC$model
test_HPLC_perf <- rf_test(rf_class_learner_HPLC$rf_task,
learner_tun_HPLC,
part_ratio = .7,
split = rf_tuning_HPLC$split,
title = "HPLC")
#Print accuracy
test_HPLC_perf$accuracy
#Print confusion matrix
test_HPLC_perf$conf_matr
#Plot performances
test_HPLC_perf$plt
#With 100 iterations, train and test the tuned model
rf_accuracies_HPLC <- run_rf(rf_class_learner_HPLC$rf_task,
times = 100,
learner = learner_tun_HPLC,
ratio = .7)
#Calculate cumulative means accuracies
cum_mean_HPLC_rf <- cumulative.mean.accuracy(rf_accuracies_HPLC$accuracies)
#Cumulative mean accuracy of 100th iteration:
cum_mean_HPLC_rf[100]
#Create a learner for rf with enose data
rf_class_learner_enose <- rf_class_learner(AllData_enose_sens)
rf_class_learner_enose$rf_task
#Check the number of elements for each sensory
rf_class_learner_enose$plt
#List of hypoparameters
rf_class_learner_enose$learner$param_set$ids()
#Perfrom tuning for rf, enose
rf_tuning_enose <- rf_tuning(ntree_min = 200, ntree_max = 500,
mtry_min = 2, mtry_max = 8,
nodesize_min = 1, nodesize_max = 5,
maxnodes_min = 2, maxnodes_max = 20,
nb_evaluation = 20, part_ratio = .7,
task_rf = rf_class_learner_enose$rf_task,
AllData = AllData_enose_sens
)
#Display optimised hyperparameters
rf_tuning_enose$instance$result_learner_param_vals
learner_tun_enose <- built_model(learner_tun = rf_tuning_enose$learner_tun,
instance = rf_tuning_enose$instance,
task_train = rf_tuning_enose$task_train)
#Display tuned learner
learner_tun_enose$model
test_enose_perf <- rf_test(rf_class_learner_enose$rf_task,
learner_tun_enose,
part_ratio = .7,
split = rf_tuning_enose$split,
title = "enose")
#Print accuracy
test_enose_perf$accuracy
#Print confusion matrix
test_enose_perf$conf_matr
#Plot performances
test_enose_perf$plt
#With 100 iterations, train and test the tunned model
rf_accuracies_enose <- run_rf(rf_class_learner_enose$rf_task,
times = 100,
learner = learner_tun_enose,
ratio = .7)
#Calculate cumulative means accuracies
cum_mean_enose_rf <- cumulative.mean.accuracy(rf_accuracies_enose$accuracies)
#Cumulative mean accuracy for 100th iteration
cum_mean_enose_rf[100]
#Create and save cumulative means plot for enose
cumulative_plot(cum_mean_enose_knn, cum_mean_enose_rf, cum_mean_enose_svm, "enose")
#Create and save cumulative means plot for HPLC
cumulative_plot(cum_mean_HPLC_knn, cum_mean_HPLC_rf, cum_mean_HPLC_svm, "HPLC")
#Barplot of misclassifications proportion per class
list_methods <- list(HPLC_sens_run_knn$misclas$mis_prop_sum,
HPLC_sens_run_svm$misclas$mis_prop_sum,
rf_accuracies_HPLC$misclas$mis_prop_sum,
enose_sens_run_knn$misclas$mis_prop_sum,
enose_sens_run_svm$misclas$mis_prop_sum,
rf_accuracies_enose$misclas$mis_prop_sum
)
list_proportions <- c("HPLC_knn", "HPLC_svm", "HPLC_rf",
"enose_knn", "enose_svm", "enose_rf")
#Create and save barplots for every dataset and method
misclassified_proportion_barplot(list_methods, list_proportions)
#Calculate the importance for knn
#HPLC data importances, kn
knn_var_importance_HPLC <- var_importance(AllData_HPLC_sens,
AllData_HPLC_sens$sensory, .7, 1,
sensory~., method = "knn",
tuneGrid = expand.grid(k = 1:20))
#Importance plot HPLC data, knn
importance_plot(knn_var_importance_HPLC$Imp, "HPLC, knn")
#Enose data importances, knn
knn_var_importance_enose <- var_importance(AllData_enose_sens,
AllData_enose_sens$sensory, .7, 1,
sensory~., method = "knn",
tuneGrid = expand.grid(k = 1:20))
#Importance plot enose data, knn
importance_plot(knn_var_importance_enose$Imp, "enose, knn")
#Calculate the importance for svm
#HPLC data importances, svm
svm_var_importance_HPLC <- var_importance(AllData_HPLC_sens,
AllData_HPLC_sens$sensory, .7, 1,
sensory~., method = "svmRadial",
tuneGrid = NULL)
#Importance plot, HPLC, svm
importance_plot(svm_var_importance_HPLC$Imp, "HPLC, svm")
#Enose data importances, svm
svm_var_importance_enose <- var_importance(AllData_enose_sens,
AllData_enose_sens$sensory, .7, 1,
sensory~., method = "svmRadial",
tuneGrid = NULL)
#Importance plot, enose, svm
importance_plot(svm_var_importance_enose$Imp, "enose, svm")
#Return table of variables importance for HPLC
overall_rf_var_importance_HPLC <- var_importance(AllData_HPLC_sens,
AllData_HPLC_sens$sensory, .7, 1,
sensory~., method = "rf",
tuneGrid = expand.grid(mtry = 2:19))
#Importance plot
overall_importance_plot(overall_rf_var_importance_HPLC$Imp, "HPLC, rf")
#Variables importance for enose
overall_rf_var_importance_enose <- var_importance(AllData_enose_sens,
AllData_enose_sens$sensory,0.7, 1,
sensory~., method = "rf",
tuneGrid = expand.grid(mtry = 2:8))
#Importance plot
overall_importance_plot(overall_rf_var_importance_enose$Imp, "enose, rf")
#Return table of variables importance for HPLC
rf_var_importance_HPLC <- rf_var_importance(AllData_HPLC_sens,
AllData_HPLC_sens$sensory,
0.7, 1,
ntree = 200L,
mtry = 2L,
nodesize = 2L,
maxnodes = 20L)
#Importance plot
importance_plot(rf_var_importance_HPLC, "HPLC, rf")
#Variables importance for enose
rf_var_importance_enose <- rf_var_importance(AllData_enose_sens,
AllData_enose_sens$sensory,0.7, 1,
ntree = 200L, mtry = 2L, nodesize = 2L, maxnodes = 20L)
#Importance plot
importance_plot(rf_var_importance_enose, "enose, rf")
#Apply tuning to Pseudomonads, HPLC
knn_tuning_HPLC_Pseud <- run_reg_model_tuning(AllData = AllData_HPLC_counts,
perc_pred = .7,
times = 1,
method = "knn",
bacteria = "Pseudomonads",
tuneGrid = expand.grid(k = 1:20), preProcess = c("center","scale"))
#Apply tuning to TVC, HPLC
knn_tuning_HPLC_TVC <- run_reg_model_tuning(AllData = AllData_HPLC_counts,
perc_pred = .7,
times = 1,
method = "knn",
bacteria = "TVC",
tuneGrid = expand.grid(k = 1:20), preProcess = c("center","scale"))
#Display if preprocessing is necessary
knn_tuning_HPLC_Pseud$preProcess
knn_tuning_HPLC_TVC$preProcess
#Display best tunings
knn_tuning_HPLC_Pseud$model.fit$bestTune
knn_tuning_HPLC_TVC$model.fit$bestTune
#Apply tuning to Pseudomonads, HPLC
knn_tuning_enose_Pseud <- run_reg_model_tuning(AllData = AllData_enose_counts,
perc_pred = .7,
times = 1,
method = "knn",
bacteria = "Pseudomonads",
tuneGrid = expand.grid(k = 1:20), preProcess = c("center","scale"))
#Apply tuning to TVC, HPLC
knn_tuning_enose_TVC <- run_reg_model_tuning(AllData = AllData_enose_counts,
perc_pred = .7,
times = 1,
method = "knn",
bacteria = "TVC",
tuneGrid = expand.grid(k = 1:20),
preProcess = c("center","scale"))
knn_tuning_enose_Pseud$preProcess
knn_tuning_enose_TVC$preProcess
#Display best tunings
knn_tuning_enose_Pseud$model.fit$bestTune
knn_tuning_enose_TVC$model.fit$bestTune
knn_HPLC_TVC <- run_reg_model_iteration(AllData = AllData_HPLC_counts,
perc_pred = .7,
times = 100,
method = "knn",
bacteria = "TVC",
tuneGrid = expand.grid(k = 1:20),
preProcess = c("center","scale"))
#Mean of RMSE for 100 iterations
knn_HPLC_TVC$mean_RMSE
knn_HPLC_TVC$sd_RMSE
knn_HPLC_TVC$CI_RMSE
plt <- plot_obs_pred(knn_HPLC_TVC$observed,
knn_HPLC_TVC$predict.model,
"Observed against predicted - KNN - HPLC TVC")
plt
knn_reg_HPLC_Pseudo <- run_reg_model_iteration(AllData = AllData_HPLC_counts,
perc_pred = .7,
times = 100,
method = "knn",
bacteria = "Pseudomonads",
tuneGrid = expand.grid(k = 1:20),
preProcess = c("center","scale"))
#Mean of RMSE for 100 iterations
knn_reg_HPLC_Pseudo$mean_RMSE
#sd of RMSE
knn_reg_HPLC_Pseudo$sd_RMSE
#95% CI of RMSE
knn_reg_HPLC_Pseudo$CI_RMSE
plt <- plot_obs_pred(knn_reg_HPLC_Pseudo$observed,
knn_reg_HPLC_Pseudo$predict.model,
"Observed against predicted - KNN - HPLC pseudomonads")
plt
knn_reg_enose_TVC <- run_reg_model_iteration(AllData = AllData_enose_counts,
perc_pred = .7,
times = 100,
method = "knn",
bacteria = "TVC",
tuneGrid = expand.grid(k = 1:20),
preProcess = c("center","scale"))
#Mean of RMSE for 100 iterations
knn_reg_enose_TVC$mean_RMSE
#sd of RMSE
knn_reg_enose_TVC$sd_RMSE
#95% of RMSE
knn_reg_enose_TVC$CI_RMSE
plt <- plot_obs_pred(knn_reg_enose_TVC$observed,
knn_reg_enose_TVC$predict.model,
"Observed against predicted - KNN - enose TVC")
plt
knn_reg_enose_Pseudo <- run_reg_model_iteration(AllData = AllData_enose_counts,
perc_pred = .7,
times = 100,
method = "knn",
bacteria = "Pseudomonads",
tuneGrid = expand.grid(k = 1:20),
preProcess = c("center","scale"))
#Mean of RMSE for 100 iterations
knn_reg_enose_Pseudo$mean_RMSE
#sd of RMSE
knn_reg_enose_Pseudo$sd_RMSE
#95% CI of RMSE
knn_reg_enose_Pseudo$CI_RMSE
plt <- plot_obs_pred(knn_reg_enose_Pseudo$observed,
knn_reg_enose_Pseudo$predict.model,
"Observed against predicted - KNN - enose pseudomonads")
plt
rf_tuning_HPLC_Pseud <- run_reg_model_tuning(AllData = AllData_HPLC_counts,
perc_pred = .7,
times = 1,
method = "rf",
bacteria = "Pseudomonads",
tuneGrid = expand.grid(mtry = 2:19),
preProcess = c("center","scale"))
#Apply tuning to TVC, HPLC
rf_tuning_HPLC_TVC <- run_reg_model_tuning(AllData = AllData_HPLC_counts,
perc_pred = .7,
times = 1,
method = "rf",
bacteria = "TVC",
tuneGrid = expand.grid(mtry = 2:19),
preProcess = c("center","scale"))
#Display if preprocessing is necessary
rf_tuning_HPLC_Pseud$preProcess
rf_tuning_HPLC_TVC$preProcess
#Display best tunings
rf_tuning_HPLC_Pseud$model.fit$bestTune
rf_tuning_HPLC_TVC$model.fit$bestTune
#Apply tuning to Pseudomonads, HPLC
rf_tuning_enose_Pseud <- run_reg_model_tuning(AllData = AllData_enose_counts,
perc_pred = .7,
times = 1,
method = "rf",
bacteria = "Pseudomonads",
tuneGrid = expand.grid(mtry = 2:9),
preProcess = c("center","scale"))
#Apply tuning to TVC, HPLC
rf_tuning_enose_TVC <- run_reg_model_tuning(AllData = AllData_enose_counts,
perc_pred = .7,
times = 1,
method = "rf",
bacteria = "TVC",
tuneGrid = expand.grid(mtry = 2:9),
preProcess = c("center","scale"))
rf_tuning_enose_Pseud$preProcess
rf_tuning_enose_TVC$preProcess
#Display best tunings
rf_tuning_enose_Pseud$model.fit$bestTune
rf_tuning_enose_TVC$model.fit$bestTune
run_rf_HPLC_TVC <- run_reg_model_iteration(AllData = AllData_HPLC_counts,
perc_pred = .7,
times = 100,
method = "knn",
bacteria = "TVC",
tuneGrid = expand.grid(k = 2:19),
preProcess = c("center","scale"))
#Mean of RMSE for 100 iterations
run_rf_HPLC_TVC$mean_RMSE
#sd of RMSE
run_rf_HPLC_TVC$sd_RMSE
#CI of RMSE
run_rf_HPLC_TVC$CI_RMSE
plt <- plot_obs_pred(run_rf_HPLC_TVC$observed,
run_rf_HPLC_TVC$predict.model,
"Observed against predicted - RF - HPLC TVC")
plt
run_rf_HPLC_Pseudo <- run_reg_model_iteration(AllData = AllData_HPLC_counts,
perc_pred = .7,
times = 100,
method = "knn",
bacteria = "Pseudomonads",
tuneGrid = expand.grid(k = 2:19),
preProcess = c("center","scale"))
#Mean of RMSE for 100 iterations
run_rf_HPLC_Pseudo$mean_RMSE
#sd of RMSE
run_rf_HPLC_Pseudo$sd_RMSE
#CI of RMSE
run_rf_HPLC_Pseudo$CI_RMSE
plt <- plot_obs_pred(run_rf_HPLC_Pseudo$observed,
run_rf_HPLC_Pseudo$predict.model,
"Observed against predicted - RF - HPLC pseudomonads")
plt
run_rf_enose_TVC <- run_reg_model_iteration(AllData = AllData_enose_counts,
perc_pred = .7,
times = 100,
method = "knn",
bacteria = "TVC",
tuneGrid = expand.grid(k = 2:9),
preProcess = c("center","scale"))
#Mean of RMSE for 100 iterations
run_rf_enose_TVC$mean_RMSE
#sd of RMSE
run_rf_enose_TVC$sd_RMSE
#CI of RMSE
run_rf_enose_TVC$CI_RMSE
plt <- plot_obs_pred(run_rf_enose_TVC$observed,
run_rf_enose_TVC$predict.model,
"Observed against predicted - RF - enose TVC")
plt
run_rf_enose_Pseudo <- run_reg_model_iteration(AllData = AllData_enose_counts,
perc_pred = .7,
times = 100,
method = "knn",
bacteria = "Pseudomonads",
tuneGrid = expand.grid(k = 2:9),
preProcess = c("center","scale"))
#Mean of RMSE for 100 iterations
run_rf_enose_Pseudo$mean_RMSE
#sd of RMSE
run_rf_enose_Pseudo$sd_RMSE
#CI of RMSE
run_rf_enose_Pseudo$CI_RMSE
plt <- plot_obs_pred(run_rf_enose_Pseudo$observed,
run_rf_enose_Pseudo$predict.model,
"Observed against predicted - RF - enose pseudomonads")
plt
#Apply tuning to Pseudomonads, HPLC
plsr_tuning_HPLC_Pseud <- run_reg_model_tuning(AllData = AllData_HPLC_counts, perc_pred = .7, times = 1, method = "pls", bacteria = "Pseudomonads",
tuneGrid = expand.grid(ncomp = 1:20), preProcess = c("center","scale"))
#Apply tuning to TVC, HPLC
plsr_tuning_HPLC_TVC <- run_reg_model_tuning(AllData = AllData_HPLC_counts, perc_pred = .7, times = 1, method = "pls", bacteria = "TVC",
tuneGrid = expand.grid(ncomp = 1:20), preProcess = c("center","scale"))
#Display if preprocessing is necessary
plsr_tuning_HPLC_Pseud$preProcess
plsr_tuning_HPLC_TVC$preProcess
#Display best tunings
plsr_tuning_HPLC_Pseud$model.fit$bestTune
plsr_tuning_HPLC_TVC$model.fit$bestTune
#Apply tuning to Pseudomonads, HPLC
pls_tuning_enose_Pseud <- run_reg_model_tuning(AllData = AllData_enose_counts, perc_pred = .7, times = 1, method = "pls", bacteria = "Pseudomonads",
tuneGrid = expand.grid(ncomp = 1:10), preProcess = c("center","scale"))
#Apply tuning to TVC, HPLC
pls_tuning_enose_TVC <- run_reg_model_tuning(AllData = AllData_enose_counts, perc_pred = .7, times = 1, method = "pls", bacteria = "TVC",
tuneGrid = expand.grid(ncomp = 1:10), preProcess = c("center","scale"))
pls_tuning_enose_Pseud$preProcess
pls_tuning_enose_TVC$preProcess
#Display best tunings
pls_tuning_enose_Pseud$model.fit$bestTune
pls_tuning_enose_TVC$model.fit$bestTune
pls_HPLC_TVC <- run_reg_model_iteration(AllData = AllData_HPLC_counts,
perc_pred = .7,
times = 100,
method = "pls",
bacteria = "TVC",
tuneGrid = expand.grid(ncomp = 1:20),
preProcess = NULL)
#Mean of RMSE for 100 iterations
pls_HPLC_TVC$mean_RMSE
pls_HPLC_TVC$sd_RMSE
pls_HPLC_TVC$CI_RMSE
plt <- plot_obs_pred(pls_HPLC_TVC$observed,
pls_HPLC_TVC$predict.model,
"Observed against predicted - PLS - HPLC TVC")
plt
pls_reg_HPLC_Pseudo <- run_reg_model_iteration(AllData = AllData_HPLC_counts,
perc_pred = .7,
times = 100,
method = "pls",
bacteria = "Pseudomonads",
tuneGrid = expand.grid(ncomp = 1:20),
preProcess = NULL)
#Mean of RMSE for 100 iterations
pls_reg_HPLC_Pseudo$mean_RMSE
#sd of RMSE
pls_reg_HPLC_Pseudo$sd_RMSE
#95% CI of RMSE
pls_reg_HPLC_Pseudo$CI_RMSE
plt <- plot_obs_pred(pls_reg_HPLC_Pseudo$observed,
pls_reg_HPLC_Pseudo$predict.model,
"Observed against predicted - PLS - HPLC pseudomonads")
plt
pls_reg_enose_TVC <- run_reg_model_iteration(AllData = AllData_enose_counts,
perc_pred = .7,
times = 100,
method = "pls",
bacteria = "TVC",
tuneGrid = expand.grid(ncomp = 1:10),
preProcess = NULL)
#Mean of RMSE for 100 iterations
pls_reg_enose_TVC$mean_RMSE
#sd of RMSE
pls_reg_enose_TVC$sd_RMSE
#95% of RMSE
pls_reg_enose_TVC$CI_RMSE
plt <- plot_obs_pred(pls_reg_enose_TVC$observed,
pls_reg_enose_TVC$predict.model,
"Observed against predicted - PLS - enose TVC")
plt
pls_reg_enose_Pseudo <- run_reg_model_iteration(AllData = AllData_enose_counts,
perc_pred = .7,
times = 100,
method = "pls",
bacteria = "Pseudomonads",
tuneGrid = expand.grid(ncomp = 1:10),
preProcess = NULL)
#Mean of RMSE for 100 iterations
pls_reg_enose_Pseudo$mean_RMSE
#sd of RMSE
pls_reg_enose_Pseudo$sd_RMSE
#95% CI of RMSE
pls_reg_enose_Pseudo$CI_RMSE
plt <- plot_obs_pred(pls_reg_enose_Pseudo$observed,
pls_reg_enose_Pseudo$predict.model,
"Observed against predicted - PLS - enose pseudomonads")
plt
